Marker interface has no method. Java has built-in marker interface like Serializable, ,remote,Clonable & EventListner etc that are understand by JVM.

We can create our own marker interface, but it has nothing to do with JVM, we can add some checks with instanceOf.

Create the empty interface
interface Marker{    }
Write a class and implements the interface
class A implements Marker {
    //do some task
}
Main class to check the marker interface instanceof
class Main {
    public static void main(String[] args) {
        A ob = new A()[
        if (ob instanceOf Marker) {
            // do some task
        }
    }
}

----------------------------------
Interfaces (also known as Service Contracts) are implemented, not constructed. 
They define a set of methods (Services) that a class provides, so a client knows what 
can he expect of the implementing class regardless of the actual type implementing the 
interface. The constructor is related to this particular instance of a given type, 
implementing the interface.
-------------------------------------
prototypePrototype design pattern mandates that the Object which 
you are copying should provide the copying feature. It should not be done by any other
class. However whether to use shallow or deep copy of the Object properties
depends on the requirements and its a design decision.public class Employees implements Cloneable{
m m
	private List<String> empList;
	
	public Employees(){
		empList = new ArrayList<String>();
	}
	
	public Employees(List<String> list){
		this.empList=list;
	}
	public void loadData(){
		//read all employees from database and put into the list
		empList.add("Pankaj");
		empList.add("Raj");
		empList.add("David");
		empList.add("Lisa");
	}
	
	public List<String> getEmpList() {
		return empList;
	}

	@Override
	public Object clone() throws CloneNotSupportedException{
			List<String> temp = new ArrayList<String>();
			for(String s : this.getEmpList()){
				temp.add(s);
			}
			return new Employees(temp);
	}
	
}

---------------------------------------------------------------------------------------------------------
http://javahungry.blogspot.com/2014/03/difference-between-hashset-and-treeset-similarities-and-example.html
hashset--store in rendom order-cost of operation in low takes constant time-doesnot contain null values
treeset--sort in nature order- operation takes log(n) time-contains null value-

---------------------------------------------------------------------------------------------------------
Volatile: value will be read from main memeory not form thread memory(cache memory)
	: van be ready by multipal thead at a times

http://javarevisited.blogspot.in/2011/06/volatile-keyword-java-example-tutorial.html


multi threading:http://javarevisited.blogspot.in/2014/07/top-50-java-multithreading-interview-questions-answers.html
why u need thread? suppose one thread is completitn its task in 60 min .If 10 thread will do,they will finish the task soon.
----------------------------------------------------------

what is threadsafe?
Thread-safe code is code that will work even if many Threads are executing it simultaneously, or
Thread-safe describes a program portion or routine that can be called from multiple programming threads without unwanted interaction between the threads.

To put it simply "Thread safety" ensures that a piece of code will execute correctly when multiple threads are executing that code.

Java provides various ways to ensure "Thread Safety" 
Use of the keyword "Synchronized".
Use of Atomic Wrapper classes from java.util.concurrent.atomic package. e.g. AtomicInteger
Use of locks from java.util.concurrent.locks package.
Using thread safe collection classes.
Using volatile keyword with variables to make every thread read the data from memory, not read from thread cache.
---------------------------------------------------------------------------------------------------------------


http://www.java67.com/2012/08/5-thread-interview-questions-answers-in.html  --JAVAREVISTE SITE
-------------------------------------------------------------------------------------------
interrupt:-
An interrupt is an indication to a thread that
 it should stop what it is doing and do something else. It's up to the programmer to decide exactly how a thread responds to an interrupt,
 but it is very common for the thread to terminate
concurrentHashMap:===http://javarevisited.blogspot.in/2013/02/concurrenthashmap-in-java-example-tutorial-working.html
prototype design pattern:http://www.journaldev.com/1440/prototype-design-pattern-in-java----database concept
http://www.java67.com/2012/08/5-thread-interview-questions-answers-in.html


JOIN---

DIFFERENCE BETWENN JOIN AND WAIT
VOLATILE
WHEN To use linkedlist over array
immutable singleton vs synchorinisation ThreadLcal

java 67  multithreading
journal dev blocking queue
Threadsafe vs synchronized

DIfference between hashset and treeset

How tree set internally works





